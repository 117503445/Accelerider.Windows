<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ctrls="clr-namespace:Accelerider.Windows.Controls">


    <ControlTemplate x:Key="FlatButtonTemplate" TargetType="Button">
        <Grid>
            <AdornerDecorator>
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" >
                    <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" 
                                           Content="{TemplateBinding Content}" Focusable="False" Padding="{TemplateBinding Padding}" 
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
            </AdornerDecorator>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding (ctrls:ControlHelper.MouseOverBackground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="Foreground" Value="{Binding (ctrls:ControlHelper.MouseOverForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <VisualStateGroup x:Key="ListBoxCommonStates" x:Shared="False"  x:Name="CommonStates">
        <VisualStateGroup.Transitions>
            <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.6" Storyboard="{x:Null}" To="Normal">
                <VisualTransition.GeneratedEasingFunction>
                    <CircleEase EasingMode="EaseOut"/>
                </VisualTransition.GeneratedEasingFunction>
            </VisualTransition>
        </VisualStateGroup.Transitions>
        <VisualState x:Name="Normal"/>
        <VisualState x:Name="MouseOver">
            <Storyboard>
                <DoubleAnimation Duration="0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                <DoubleAnimation Duration="0" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_MouseOverRectangle"/>
            </Storyboard>
        </VisualState>
        <VisualState x:Name="Disabled"/>
    </VisualStateGroup>

    <VisualStateGroup x:Key="ListBoxSelectionStates" x:Shared="False" x:Name="SelectionStates">
        <VisualStateGroup.Transitions>
            <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.4" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
        </VisualStateGroup.Transitions>
        <VisualState x:Name="Selected">
            <Storyboard>
                <DoubleAnimation Duration="0" To="0.8" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_SeletedRectangle"/>
            </Storyboard>
        </VisualState>
        <VisualState x:Name="Unselected"/>
        <VisualState x:Name="SelectedUnfocused">
            <Storyboard>
                <DoubleAnimation Duration="0" To="0.8" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_SeletedRectangle"/>
            </Storyboard>
        </VisualState>
    </VisualStateGroup>


    <Style x:Key="FlatButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource FlatButtonTemplate}" />
    </Style>

    <Style x:Key="ToolBarButtonStyle" TargetType="Button" BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="Height" Value="42" />
        <Setter Property="Foreground" Value="#606060"/>
        <Setter Property="ctrls:ControlHelper.MouseOverBackground" Value="#7679BE" />
        <Setter Property="ctrls:ControlHelper.MouseOverForeground" Value="White" />
    </Style>


    <Style x:Key="MainWindowStyle" TargetType="Window">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="32" GlassFrameThickness="1" CornerRadius="0" UseAeroCaptionButtons="False" NonClientFrameEdges="None" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}">
                        <AdornerDecorator>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="32"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>

                                <!--Title bar-->
                                <Grid Grid.Row="0" Background="{StaticResource PrimaryHueMidBrush}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <!--Title-->
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1"
                                               Text="{TemplateBinding Title}" Foreground="White" FontSize="14"/>

                                    <!--Window button-->
                                    <StackPanel Grid.Column="2" Orientation="Horizontal">
                                        <StackPanel.Resources>
                                            <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource FlatButtonStyle}">
                                                <Setter Property="ctrls:ControlHelper.MouseOverBackground" Value="{StaticResource PrimaryHueDarkBrush}" />
                                                <Setter Property="ctrls:ControlHelper.MouseOverForeground" Value="White"/>
                                                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                                <Setter Property="Width" Value="46"/>
                                                <Setter Property="Margin" Value="4 0 0 0"/>
                                            </Style>

                                            <Style x:Key="NormalButtonStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonStyle}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="Maximized">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>

                                            <Style x:Key="MaximizedButtonStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonStyle}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="Normal">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </StackPanel.Resources>
                                        <Button Style="{StaticResource WindowButtonStyle}" >
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" PropertyName="WindowState" Value="Minimized"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <materialDesign:PackIcon Kind="WindowMinimize" />
                                        </Button>
                                        <Button Style="{StaticResource MaximizedButtonStyle}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" PropertyName="WindowState" Value="Normal"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <materialDesign:PackIcon Kind="WindowRestore" />
                                        </Button>
                                        <Button Style="{StaticResource NormalButtonStyle}" >
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" PropertyName="WindowState" Value="Maximized"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <materialDesign:PackIcon Kind="WindowMaximize" />
                                        </Button>
                                        <Button Style="{StaticResource WindowButtonStyle}" ctrls:ControlHelper.MouseOverBackground="Red">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:CallMethodAction TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" MethodName="Close" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <materialDesign:PackIcon Kind="WindowClose" />
                                        </Button>
                                    </StackPanel>
                                </Grid>

                                <!--Content-->
                                <ContentPresenter Grid.Row="1"/>
                            </Grid>
                        </AdornerDecorator>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="BorderThickness" Value="0"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="Padding" Value="8"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EnteringWindowStyle" TargetType="Window">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="60" CornerRadius="0" GlassFrameThickness="1" UseAeroCaptionButtons="False" NonClientFrameEdges="None" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" >
                        <AdornerDecorator>
                            <Grid Background="White">
                                <Image Source="Images\LogoSmall.png" Height="24" Width="24" Margin="8 5 0 0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                                <ContentPresenter />
                                <Button HorizontalAlignment="Right" VerticalAlignment="Top" Focusable="False"
                                        Style="{StaticResource MaterialDesignToolButton}"
                                        WindowChrome.IsHitTestVisibleInChrome="True"
                                        Margin="0 2 5 0">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <ei:CallMethodAction TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" MethodName="Close" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <materialDesign:PackIcon Kind="WindowClose"></materialDesign:PackIcon>
                                </Button>
                                <materialDesign:Snackbar MessageQueue="{Binding GlobalMessageQueue}" />
                            </Grid>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}" Margin="{TemplateBinding Margin}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.4" Storyboard="{x:Null}" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.2" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder" Opacity="0">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="Black" LowValue="{StaticResource ListBoxItemMouseOverBackgroundBrush}"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="Black" LowValue="{StaticResource LightGreyBackgoundBrush}"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="1"/>
                                </Border.RenderTransform>
                            </Border>
                            <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <materialDesign:Ripple.Feedback>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="White" LowValue="LightGray"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </materialDesign:Ripple.Feedback>
                            </materialDesign:Ripple>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightBarAndUnderlineListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}" Margin="{TemplateBinding Margin}">
                        <VisualStateManager.VisualStateGroups>
                            <StaticResource ResourceKey="ListBoxCommonStates"/>
                            <StaticResource ResourceKey="ListBoxSelectionStates"/>
                        </VisualStateManager.VisualStateGroups>

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="MouseOverBorder" Opacity="0">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="{StaticResource PrimaryHueLightBrush}" HighValue="White"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="{StaticResource PrimaryHueLightBrush}" HighValue="White"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="1"/>
                                </Border.RenderTransform>
                            </Border>
                            <materialDesign:Ripple x:Name="Ripple" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <materialDesign:Ripple.Feedback>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="White" HighValue="Black"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </materialDesign:Ripple.Feedback>
                            </materialDesign:Ripple>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_SeletedRectangle" Fill="{StaticResource PrimaryHueMidBrush}" Opacity="0"/>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_MouseOverRectangle" Fill="{StaticResource PrimaryHueMidBrush}" Opacity="0"/>
                            <Border Grid.Row="1" Background="{DynamicResource LightGreyBackgoundBrush}" Height="2" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightBarListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}" Margin="{TemplateBinding Margin}">
                        <VisualStateManager.VisualStateGroups>
                            <StaticResource ResourceKey="ListBoxCommonStates"/>
                            <StaticResource ResourceKey="ListBoxSelectionStates"/>
                        </VisualStateManager.VisualStateGroups>

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="MouseOverBorder" Opacity="0">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="{StaticResource PrimaryHueMidBrush}" HighValue="White"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="{StaticResource PrimaryHueMidBrush}" HighValue="White"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="1"/>
                                </Border.RenderTransform>
                            </Border>
                            <materialDesign:Ripple x:Name="Ripple" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <materialDesign:Ripple.Feedback>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter LowValue="White" HighValue="Black"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </materialDesign:Ripple.Feedback>
                            </materialDesign:Ripple>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_SeletedRectangle" Fill="#9FA4FE" Opacity="0"/>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_MouseOverRectangle" Fill="#9FA4FE" Opacity="0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextListBoxItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Foreground" Value="{StaticResource PrimaryHueMidBrush}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="4 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}" Margin="{TemplateBinding Margin}">
                        <ContentPresenter></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="FileImageSelectorStyle" TargetType="Image">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="28"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ApkType">
                <Setter Property="Source" Value="Images/FileTypes/ApkType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="DocType">
                <Setter Property="Source" Value="Images/FileTypes/DocType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ExeType">
                <Setter Property="Source" Value="Images/FileTypes/ExeType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="FolderType">
                <Setter Property="Source" Value="Images/FileTypes/FolderType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ImgType">
                <Setter Property="Source" Value="Images/FileTypes/ImgType.png"/>
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="MixFileType">
                <Setter Property="Source" Value="Images/FileTypes/MixFileType.png"/>
            </DataTrigger>-->
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="MusicType">
                <Setter Property="Source" Value="Images/FileTypes/MusicType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="OtherType">
                <Setter Property="Source" Value="Images/FileTypes/OtherType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="PdfType">
                <Setter Property="Source" Value="Images/FileTypes/PdfType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="PptType">
                <Setter Property="Source" Value="Images/FileTypes/PptType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="RarType">
                <Setter Property="Source" Value="Images/FileTypes/RarType.png"/>
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="TorrentType">
                <Setter Property="Source" Value="Images/FileTypes/TorrentType.png"/>
            </DataTrigger>-->
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="TxtType">
                <Setter Property="Source" Value="Images/FileTypes/TxtType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="VideoType">
                <Setter Property="Source" Value="Images/FileTypes/VideoType.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="XlsType">
                <Setter Property="Source" Value="Images/FileTypes/XlsType.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeftTabListStyle" TargetType="Grid">
        <Setter Property="Width" Value="280" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window},
                                           Converter={StaticResource IsLessThanConverter}, ConverterParameter=920}"
                         Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="ctrls:SwitchLoadingViewContainer">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="LoadingContent">
            <Setter.Value>
                <ProgressBar IsIndeterminate="True" Width="24" Height="24" Margin="16" Value="33"
                             Style="{DynamicResource MaterialDesignCircularProgressBar}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{Binding LoadedContent, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsLoading, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Content" Value="{Binding LoadingContent, RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    </Style>


    <!-- TabControl style -->
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{StaticResource PrimaryHueMidBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root" SnapsToDevicePixels="true" >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.4" Storyboard="{x:Null}" To="{x:Null}">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Storyboard.TargetName="selectedUnderline" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.4" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver" >
                                    <Storyboard>
                                        <DoubleAnimation To="0.4" Storyboard.TargetName="mouseOverUnderline" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                                          Margin="8" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Rectangle x:Name="selectedUnderline" Margin="8 0" Opacity="0" Height="4" Focusable="False" VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}"/>
                        <Rectangle x:Name="mouseOverUnderline" Margin="8 0" Opacity="0" Height="4" Focusable="False" VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter Property="Cursor" Value="Hand"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <StackPanel ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <TabPanel Background="Transparent" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- ToggleButton style -->
    <Style x:Key="RightBarAndUnderlineToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{StaticResource PrimaryHueDarkBrush}" ClipToBounds="{TemplateBinding ClipToBounds}" Margin="{TemplateBinding Margin}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.4" Storyboard="{x:Null}" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                        <DoubleAnimation Duration="0" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_MouseOverRectangle"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.2" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.8" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckedBorder"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_CheckedRectangle"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder" Opacity="0">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="Black" LowValue="{StaticResource PrimaryHueMidBrush}"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <Border x:Name="CheckedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="Black" LowValue="{StaticResource PrimaryHueMidBrush}"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <materialDesign:Ripple.Feedback>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <converters:BrushRoundConverter HighValue="White" LowValue="LightGray"/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </materialDesign:Ripple.Feedback>
                            </materialDesign:Ripple>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_CheckedRectangle" Fill="{StaticResource PrimaryHueLightBrush}" Opacity="0"/>
                            <Rectangle Width="4" HorizontalAlignment="Left" x:Name="PART_MouseOverRectangle" Fill="{StaticResource PrimaryHueLightBrush}" Opacity="0"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>